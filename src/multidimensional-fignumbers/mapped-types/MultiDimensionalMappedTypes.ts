import type { MappedTypeConfig } from "../../core/mapped-types/MappedTypeConfig.js";
import {
  BiquadraticGenerator,
  CenteredHyperOctahedralGenerator,
  CenteredPolytopeGenerator,
  FiveDimensionalMgonalPyramidalGenerator,
  FourDimensionalMgonalPyramidalGenerator,
  HyperDodecahedralGenerator,
  HyperIcosahedralGenerator,
  HyperOctahedralGenerator,
  KDimensionalCenteredHyperCubeGenerator,
  KDimensionalHyperCubeGenerator,
  KDimensionalHyperTetrahedronGenerator,
  NexusGenerator,
  PentatopeGenerator,
  PolyOctahedralGenerator,
  SixDimensionalMgonalPyramidalGenerator,
  CenteredBiquadraticGenerator,
  KDimensionalMgonalPyramidalGenerator,
  KDimensionalHyperOctahedronGenerator,
  KDimensionalCenteredHyperTetrahedronGenerator,
  KDimensionalCenteredHyperOctahedronGenerator,
} from "../strategies/index.js";

export const MULTIDIMENSIONAL_MAP_STRATEGY = {
  biquadratic: new BiquadraticGenerator(),
  centeredHyperOctahedral: new CenteredHyperOctahedralGenerator(),
  centeredPolytope: new CenteredPolytopeGenerator(),
  fiveDimensionalMgonalPyramidal: new FiveDimensionalMgonalPyramidalGenerator(),
  fourDimensionalMgonalPyramidal: new FourDimensionalMgonalPyramidalGenerator(),
  hyperDodecahedral: new HyperDodecahedralGenerator(),
  hyperIcosahedral: new HyperIcosahedralGenerator(),
  hyperOctahedral: new HyperOctahedralGenerator(),
  kDimensionalCenteredHyperCube: new KDimensionalCenteredHyperCubeGenerator(),
  kDimensionalHyperCube: new KDimensionalHyperCubeGenerator(),
  kDimensionalHyperTetrahedron: new KDimensionalHyperTetrahedronGenerator(),
  nexus: new NexusGenerator(),
  pentatope: new PentatopeGenerator(),
  polyOctahedral: new PolyOctahedralGenerator(),
  sixDimensionalMgonalPyramidal: new SixDimensionalMgonalPyramidalGenerator(),
  centeredBiquadratic: new CenteredBiquadraticGenerator(),
  kDimensionalMgonalPyramidal: new KDimensionalMgonalPyramidalGenerator(),
  kDimensionalHyperOctahedron: new KDimensionalHyperOctahedronGenerator(),
  kDimensionalCenteredHyperTetrahedron: new KDimensionalCenteredHyperTetrahedronGenerator(),
  kDimensionalCenteredHyperOctahedron: new KDimensionalCenteredHyperOctahedronGenerator(),
} as const;

export type MultiDimensionalConfigMap = MappedTypeConfig<typeof MULTIDIMENSIONAL_MAP_STRATEGY>;
