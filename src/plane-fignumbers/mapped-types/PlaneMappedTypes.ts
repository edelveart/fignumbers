import type { MappedTypeConfig } from "../../core/mapped-types/MappedTypeConfig.js";
import {
  AztecDiamondGenerator,
  CenteredPolygonalGenerator,
  CrossGenerator,
  GnomicGenerator,
  ImpoliteGenerator,
  PoliteGenerator,
  PolygonalGenerator,
  PolygramGenerator,
  PronicGenerator,
  TruncatedCenteredPolygonalGenerator,
  PolygonalSpecificGenerator,
  CenteredPolygonalSpecificGenerator,
  TruncatedCenteredPolygonalSpecificGenerator,
  PolygramSpecificGenerator,
} from "../strategies/index.js";

const baseStrategies = {
  polygonal: new PolygonalGenerator(),
  centeredPolygonal: new CenteredPolygonalGenerator(),
  truncatedCenteredPolygonal: new TruncatedCenteredPolygonalGenerator(),
  pronic: new PronicGenerator(),
  polite: new PoliteGenerator(),
  impolite: new ImpoliteGenerator(),
  aztecDiamond: new AztecDiamondGenerator(),
  gnomic: new GnomicGenerator(),
  cross: new CrossGenerator(),
  polygram: new PolygramGenerator(),
};

const polygonalSpecificStrategies = {
  triangular: new PolygonalSpecificGenerator(3n),
  square: new PolygonalSpecificGenerator(4n),
  pentagonal: new PolygonalSpecificGenerator(5n),
  hexagonal: new PolygonalSpecificGenerator(6n),
  heptagonal: new PolygonalSpecificGenerator(7n),
  octagonal: new PolygonalSpecificGenerator(8n),
  nonagonal: new PolygonalSpecificGenerator(9n),
  decagonal: new PolygonalSpecificGenerator(10n),
  hendecagonal: new PolygonalSpecificGenerator(11n),
  dodecagonal: new PolygonalSpecificGenerator(12n),
  tridecagonal: new PolygonalSpecificGenerator(13n),
  tetradecagonal: new PolygonalSpecificGenerator(14n),
  pentadecagonal: new PolygonalSpecificGenerator(15n),
  hexadecagonal: new PolygonalSpecificGenerator(16n),
  heptadecagonal: new PolygonalSpecificGenerator(17n),
  octadecagonal: new PolygonalSpecificGenerator(18n),
  nonadecagonal: new PolygonalSpecificGenerator(19n),
  icosagonal: new PolygonalSpecificGenerator(20n),
  icosihenagonal: new PolygonalSpecificGenerator(21n),
  icosidigonal: new PolygonalSpecificGenerator(22n),
  icositrigonal: new PolygonalSpecificGenerator(23n),
  icositetragonal: new PolygonalSpecificGenerator(24n),
  icosipentagonal: new PolygonalSpecificGenerator(25n),
  icosihexagonal: new PolygonalSpecificGenerator(26n),
  icosiheptagonal: new PolygonalSpecificGenerator(27n),
  icosioctagonal: new PolygonalSpecificGenerator(28n),
  icosinonagonal: new PolygonalSpecificGenerator(29n),
  triacontagonal: new PolygonalSpecificGenerator(30n),
};

const centeredPolygonalSpecificStrategies = {
  centeredTriangular: new CenteredPolygonalSpecificGenerator(3n),
  centeredSquare: new CenteredPolygonalSpecificGenerator(4n),
  centeredPentagonal: new CenteredPolygonalSpecificGenerator(5n),
  centeredHexagonal: new CenteredPolygonalSpecificGenerator(6n),
  centeredHeptagonal: new CenteredPolygonalSpecificGenerator(7n),
  centeredOctagonal: new CenteredPolygonalSpecificGenerator(8n),
  centeredNonagonal: new CenteredPolygonalSpecificGenerator(9n),
  centeredDecagonal: new CenteredPolygonalSpecificGenerator(10n),
  centeredHendecagonal: new CenteredPolygonalSpecificGenerator(11n),
  centeredDodecagonal: new CenteredPolygonalSpecificGenerator(12n),
  centeredTridecagonal: new CenteredPolygonalSpecificGenerator(13n),
  centeredTetradecagonal: new CenteredPolygonalSpecificGenerator(14n),
  centeredPentadecagonal: new CenteredPolygonalSpecificGenerator(15n),
  centeredHexadecagonal: new CenteredPolygonalSpecificGenerator(16n),
  centeredHeptadecagonal: new CenteredPolygonalSpecificGenerator(17n),
  centeredOctadecagonal: new CenteredPolygonalSpecificGenerator(18n),
  centeredNonadecagonal: new CenteredPolygonalSpecificGenerator(19n),
  centeredIcosagonal: new CenteredPolygonalSpecificGenerator(20n),
  centeredIcosihenagonal: new CenteredPolygonalSpecificGenerator(21n),
  centeredIcosidigonal: new CenteredPolygonalSpecificGenerator(22n),
  centeredIcositrigonal: new CenteredPolygonalSpecificGenerator(23n),
  centeredIcositetragonal: new CenteredPolygonalSpecificGenerator(24n),
  centeredIcosipentagonal: new CenteredPolygonalSpecificGenerator(25n),
  centeredIcosihexagonal: new CenteredPolygonalSpecificGenerator(26n),
  centeredIcosiheptagonal: new CenteredPolygonalSpecificGenerator(27n),
  centeredIcosioctagonal: new CenteredPolygonalSpecificGenerator(28n),
  centeredIcosinonagonal: new CenteredPolygonalSpecificGenerator(29n),
  centeredTriacontagonal: new CenteredPolygonalSpecificGenerator(30n),
};

const truncatedCenteredPolygonalSpecificStrategies = {
  truncatedCenteredTriangular: new TruncatedCenteredPolygonalSpecificGenerator(3n),
  truncatedCenteredSquare: new TruncatedCenteredPolygonalSpecificGenerator(4n),
  truncatedCenteredPentagonal: new TruncatedCenteredPolygonalSpecificGenerator(5n),
  truncatedCenteredHexagonal: new TruncatedCenteredPolygonalSpecificGenerator(6n),
  truncatedCenteredHeptagonal: new TruncatedCenteredPolygonalSpecificGenerator(7n),
  truncatedCenteredOctagonal: new TruncatedCenteredPolygonalSpecificGenerator(8n),
  truncatedCenteredNonagonal: new TruncatedCenteredPolygonalSpecificGenerator(9n),
  truncatedCenteredDecagonal: new TruncatedCenteredPolygonalSpecificGenerator(10n),
  truncatedCenteredHendecagonal: new TruncatedCenteredPolygonalSpecificGenerator(11n),
  truncatedCenteredDodecagonal: new TruncatedCenteredPolygonalSpecificGenerator(12n),
  truncatedCenteredTridecagonal: new TruncatedCenteredPolygonalSpecificGenerator(13n),
  truncatedCenteredTetradecagonal: new TruncatedCenteredPolygonalSpecificGenerator(14n),
  truncatedCenteredPentadecagonal: new TruncatedCenteredPolygonalSpecificGenerator(15n),
  truncatedCenteredHexadecagonal: new TruncatedCenteredPolygonalSpecificGenerator(16n),
  truncatedCenteredHeptadecagonal: new TruncatedCenteredPolygonalSpecificGenerator(17n),
  truncatedCenteredOctadecagonal: new TruncatedCenteredPolygonalSpecificGenerator(18n),
  truncatedCenteredNonadecagonal: new TruncatedCenteredPolygonalSpecificGenerator(19n),
  truncatedCenteredIcosagonal: new TruncatedCenteredPolygonalSpecificGenerator(20n),
  truncatedCenteredIcosihenagonal: new TruncatedCenteredPolygonalSpecificGenerator(21n),
  truncatedCenteredIcosidigonal: new TruncatedCenteredPolygonalSpecificGenerator(22n),
  truncatedCenteredIcositrigonal: new TruncatedCenteredPolygonalSpecificGenerator(23n),
  truncatedCenteredIcositetragonal: new TruncatedCenteredPolygonalSpecificGenerator(24n),
  truncatedCenteredIcosipentagonal: new TruncatedCenteredPolygonalSpecificGenerator(25n),
  truncatedCenteredIcosihexagonal: new TruncatedCenteredPolygonalSpecificGenerator(26n),
  truncatedCenteredIcosiheptagonal: new TruncatedCenteredPolygonalSpecificGenerator(27n),
  truncatedCenteredIcosioctagonal: new TruncatedCenteredPolygonalSpecificGenerator(28n),
  truncatedCenteredIcosinonagonal: new TruncatedCenteredPolygonalSpecificGenerator(29n),
  truncatedCenteredTriacontagonal: new TruncatedCenteredPolygonalSpecificGenerator(30n),
};

const polygramSpecificStrategies = {
  pentagram: new PolygramSpecificGenerator(5n),
  hexagram: new PolygramSpecificGenerator(6n),
  heptagram: new PolygramSpecificGenerator(7n),
  octagram: new PolygramSpecificGenerator(8n),
  nonagram: new PolygramSpecificGenerator(9n),
  decagram: new PolygramSpecificGenerator(10n),
  hendecagram: new PolygramSpecificGenerator(11n),
  dodecagram: new PolygramSpecificGenerator(12n),
  tridecagram: new PolygramSpecificGenerator(13n),
  tetradecagram: new PolygramSpecificGenerator(14n),
  pentadecagram: new PolygramSpecificGenerator(15n),
  hexadecagram: new PolygramSpecificGenerator(16n),
  heptadecagram: new PolygramSpecificGenerator(17n),
  octadecagram: new PolygramSpecificGenerator(18n),
  nonadecagram: new PolygramSpecificGenerator(19n),
  icosagram: new PolygramSpecificGenerator(20n),
  icosihenagram: new PolygramSpecificGenerator(21n),
  icosidigram: new PolygramSpecificGenerator(22n),
  icositrigram: new PolygramSpecificGenerator(23n),
  icositetragram: new PolygramSpecificGenerator(24n),
  icosipentagram: new PolygramSpecificGenerator(25n),
  icosihexagram: new PolygramSpecificGenerator(26n),
  icosiheptagram: new PolygramSpecificGenerator(27n),
  icosioctagram: new PolygramSpecificGenerator(28n),
  icosinonagram: new PolygramSpecificGenerator(29n),
  triacontagram: new PolygramSpecificGenerator(30n),
};

export const PLANE_MAP_STRATEGY = {
  ...baseStrategies,
  ...polygonalSpecificStrategies,
  ...centeredPolygonalSpecificStrategies,
  ...truncatedCenteredPolygonalSpecificStrategies,
  ...polygramSpecificStrategies,
} as const;

export type PlaneConfigMap = MappedTypeConfig<typeof PLANE_MAP_STRATEGY>;
